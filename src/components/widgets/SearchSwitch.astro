---
import { getUrl } from '~/utils/common-utils'
---

<button
  id="search-switch"
  class="op-60 hover:op-100 op-transition"
  title="Search"
  aria-label="Search"
>
  <div u-i-grommet-icons:search></div>
</button>

<div
  transition:persist
  id="search-panel"
  class="float-panel-closed op-transition
    z-200 fixed top-20 right-8
    grid grid-rows-[auto_1fr]
    w-30rem max-h-80vh p-2 rounded-lg lt-md:(w-90% left-5% right-5%)
    bg-[var(--c-bg)] shadow-c"
  tabindex="-1"
>
  <div
    id="search-bar"
    class="grid grid-cols-[auto_1fr] items-center
      h-10 px-3 rounded-md
      bg-[#88888811]"
  >
    <div id="search-icon" class="i-grommet-icons:search op-60"></div>
    <label class="sr-only" for="search-input">Search</label>
    <input
      type="search"
      id="search-input"
      class="h-full pl-2 bg-transparent outline-0"
      placeholder="Search"
      autocomplete="off"
    />
  </div>
  <div id="search-results" class="overflow-y-auto" data-base={getUrl('/')}></div>
</div>

<style is:global>
  input[type='search']::-webkit-search-cancel-button {
    display: none;
  }

  .search-results__a:first-child {
    margin-top: 8px;
  }

  .search-results__a {
    display: flex;
    flex-direction: column;
    gap: 1px;

    padding: 0.75rem;
    border-radius: 6px;

    opacity: 0.6;
    background: transparent;

    font-size: 1.1rem;
    transition: opacity 0.2s ease;
  }

  .search-results__a:hover {
    opacity: 1;
    background: #88888811;
  }

  .search-results__title {
    color: var(--c-text);
  }

  .search-results__excerpt {
    font-size: 0.875rem;
    line-height: 1.25rem;
    font-weight: 400;

    opacity: 0.5;
  }

  mark {
    background: transparent;

    color: var(--c-text);
    font-size: 1.06em;
  }
</style>

<style>
  .float-panel-closed {
    opacity: 0;
    pointer-events: none;
  }

  #search-bar:hover #search-icon,
  #search-bar:focus-within #search-icon {
    opacity: 1;
  }
</style>

<script>
  document.addEventListener('astro:page-load', () => {
    const handleOpen = () => {
      const searchPanel = document.getElementById('search-panel')
      searchPanel?.classList.toggle('float-panel-closed')
    }

    const searchSwitch = document.getElementById('search-switch')
    searchSwitch?.addEventListener('click', handleOpen)
  })

  const handleClose = (event: MouseEvent) => {
    const panels = [{id: 'search-panel', ignores: ['search-panel','search-bar', 'search-results', 'search-switch']}]

    panels.forEach(panel => {
      const panelEl = document.getElementById(panel.id)
      if (!panelEl || panelEl.classList.contains('float-panel-closed')) return

      const target = event.target
      const isClickedOutside =
        target instanceof Node &&
        !panelEl.contains(target) &&
        !panel.ignores.some((ignoreId) => {
          const ignoreEl = document.getElementById(ignoreId)
          return ignoreEl?.contains(target)
        })

      if (isClickedOutside) {
        panelEl.classList.add('float-panel-closed')
      }
    })
  }

  document.addEventListener('click', (event) => handleClose(event))
</script>

<script>
  const fakeResults = [
    {
      meta: {
        title: 'Simulated Search Result in Dev Env',
      },
      excerpt: 'Mock data is used to simulate pagefind search <mark>in development</mark>, where files required for indexing exist only in memory.',
    },
    {
      meta: {
        title: 'Testing Search Functionality in Prod Env',
      },
      excerpt: 'Try running <mark>pnpm build && pnpm preview</mark> instead.',
    }
  ]

  const handleInput = async (event: Event) => {
    const searchResults = document.getElementById('search-results')
    if (searchResults) searchResults.innerHTML = ''
    if (import.meta.env.PROD) {
      // @ts-expect-error (for Cannot find name 'pagefind'.ts(2304), used as window.pagefind)
      const search = await pagefind.search(event.target.value)

      for (const result of search.results) {
        const data = await result.data()
        // console.log('data', data)
        document.getElementById('search-results')!.innerHTML += `
        <a href="${data.url}" class="search-results__a">
          <div class="search-results__title">${data.meta.title}</div>
          <div class="search-results__excerpt">${data.excerpt}</div>
        </a>`
      }
    } else {
      for (const data of fakeResults) {
        const searchResults = document.getElementById('search-results')!
        searchResults.innerHTML += `
          <a href=${searchResults.dataset.base} class="search-results__a">
            <div class="search-results__title">${data.meta.title}</div>
            <div class="search-results__excerpt">${data.excerpt}</div>
          </a>`
      }
    }
  }

  const searchInput = document.getElementById('search-input')
  searchInput?.addEventListener('input', (event) => handleInput(event))
</script>

{import.meta.env.PROD &&
  <script is:inline define:vars={{scriptUrl: getUrl('/pagefind/pagefind.js')}}>
    async function loadPagefind() {
      const pagefind = await import(scriptUrl)

      await pagefind.options({
        'excerptLength': 20
      })

      pagefind.init()
      window.pagefind = pagefind
      pagefind.search('')
    }

    if (!window.pagefind) loadPagefind()
  </script>}
